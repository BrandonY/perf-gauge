/* automatically generated by rust-bindgen 0.60.1 */

pub const ClientAPI_GRPC_DIRECTPATH: ClientAPI = 0;
pub const ClientAPI_GRPC_NO_DIRECTPATH: ClientAPI = 1;
pub const ClientAPI_JSON: ClientAPI = 2;
pub type ClientAPI = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoogleStorageClient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallResult {
    pub success: bool,
    pub bytes_received: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_CallResult() {
    assert_eq!(
        ::std::mem::size_of::<CallResult>(),
        16usize,
        concat!("Size of: ", stringify!(CallResult))
    );
    assert_eq!(
        ::std::mem::align_of::<CallResult>(),
        8usize,
        concat!("Alignment of ", stringify!(CallResult))
    );
    fn test_field_success() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CallResult>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).success) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CallResult),
                "::",
                stringify!(success)
            )
        );
    }
    test_field_success();
    fn test_field_bytes_received() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CallResult>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bytes_received) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CallResult),
                "::",
                stringify!(bytes_received)
            )
        );
    }
    test_field_bytes_received();
}
extern "C" {
    pub fn CreateGCSClient(
        client_api: ClientAPI,
        project: *const ::std::os::raw::c_char,
    ) -> *mut GoogleStorageClient;
}
extern "C" {
    pub fn DestroyGCSClient(client: *mut GoogleStorageClient);
}
extern "C" {
    pub fn ReadObject(
        client: *mut GoogleStorageClient,
        bucket: *const ::std::os::raw::c_char,
        obj: *const ::std::os::raw::c_char,
    ) -> CallResult;
}
